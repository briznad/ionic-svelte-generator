// Type definitions for Ionic-Svelte components

interface ComponentOptions<Props = {}> {
  target: HTMLElement;
  props?: Props;
  events?: Record<string, (event: CustomEvent) => void>;
}

interface SvelteComponent {
  update(props: Record<string, any>): void;
  destroy(): void;
}

export interface IonAccordionProps {
  /**
   * If `true`, the accordion cannot be interacted with.
   * @default false
   */
  disabled: boolean;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the accordion cannot be interacted with,
but does not alter the opacity.
   * @default false
   */
  readonly: boolean;
  /**
   * The toggle icon to use. This icon will be
rotated when the accordion is expanded
or collapsed.
   * @default chevronDown
   */
  toggleIcon: string;
  /**
   * The slot inside of `ion-item` to
place the toggle icon. Defaults to `"end"`.
   * @default 'end'
   */
  toggleIconSlot: 'end' | 'start';
  /**
   * The value of the accordion. Defaults to an autogenerated
value.
   * @default `ion-accordion-${accordionIds++}`
   */
  value: string;
}
export interface IonAccordionGroupProps {
  /**
   * If `true`, all accordions inside of the
accordion group will animate when expanding
or collapsing.
   * @default true
   */
  animated: boolean;
  /**
   * If `true`, the accordion group cannot be interacted with.
   * @default false
   */
  disabled: boolean;
  /**
   * Describes the expansion behavior for each accordion.
Possible values are `"compact"` and `"inset"`.
Defaults to `"compact"`.
   * @default 'compact'
   */
  expand: 'compact' | 'inset';
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the accordion group can have multiple
accordion components expanded at the same time.
   */
  multiple: boolean;
  /**
   * If `true`, the accordion group cannot be interacted with,
but does not alter the opacity.
   * @default false
   */
  readonly: boolean;
  /**
   * The value of the accordion group. This controls which
accordions are expanded.
This should be an array of strings only when `multiple="true"`
   */
  value?: null | string | string[] | undefined;
}
export interface IonActionSheetProps {
  /**
   * If `true`, the action sheet will animate.
   * @default true
   */
  animated: boolean;
  /**
   * If `true`, the action sheet will be dismissed when the backdrop is clicked.
   * @default true
   */
  backdropDismiss: boolean;
  /**
   * An array of buttons for the action sheet.
   * @default []
   */
  buttons: (string | ActionSheetButton<any>)[];
  /**
   * Additional classes to apply for custom CSS. If multiple classes are
provided they should be separated by spaces.
   */
  cssClass?: string | string[] | undefined;
  /**
   * Animation to use when the action sheet is presented.
   */
  enterAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Title for the action sheet.
   */
  header: string;
  /**
   * Additional attributes to pass to the action sheet.
   */
  htmlAttributes?: undefined | { [key: string]: any; };
  /**
   * If `true`, the action sheet will open. If `false`, the action sheet will close.
Use this if you need finer grained control over presentation, otherwise
just use the actionSheetController or the `trigger` property.
Note: `isOpen` will not automatically be set back to `false` when
the action sheet dismisses. You will need to do that in your code.
   * @default false
   */
  isOpen: boolean;
  /**
   * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
   * @default true
   */
  keyboardClose: boolean;
  /**
   * Animation to use when the action sheet is dismissed.
   */
  leaveAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Subtitle for the action sheet.
   */
  subHeader: string;
  /**
   * If `true`, the action sheet will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
  /**
   * An ID corresponding to the trigger element that
causes the action sheet to open when clicked.
   */
  trigger?: string | undefined;
}
export interface IonAlertProps {
  /**
   * If `true`, the alert will animate.
   * @default true
   */
  animated: boolean;
  /**
   * If `true`, the alert will be dismissed when the backdrop is clicked.
   * @default true
   */
  backdropDismiss: boolean;
  /**
   * Array of buttons to be added to the alert.
   * @default []
   */
  buttons: (string | AlertButton)[];
  /**
   * Additional classes to apply for custom CSS. If multiple classes are
provided they should be separated by spaces.
   */
  cssClass?: string | string[] | undefined;
  /**
   * Animation to use when the alert is presented.
   */
  enterAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The main title in the heading of the alert.
   */
  header: string;
  /**
   * Additional attributes to pass to the alert.
   */
  htmlAttributes?: undefined | { [key: string]: any; };
  /**
   * Array of input to show in the alert.
   * @default []
   */
  inputs: AlertInput[];
  /**
   * If `true`, the alert will open. If `false`, the alert will close.
Use this if you need finer grained control over presentation, otherwise
just use the alertController or the `trigger` property.
Note: `isOpen` will not automatically be set back to `false` when
the alert dismisses. You will need to do that in your code.
   * @default false
   */
  isOpen: boolean;
  /**
   * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
   * @default true
   */
  keyboardClose: boolean;
  /**
   * Animation to use when the alert is dismissed.
   */
  leaveAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The main message to be displayed in the alert.
`message` can accept either plaintext or HTML as a string.
To display characters normally reserved for HTML, they
must be escaped. For example `<Ionic>` would become
`&lt;Ionic&gt;`

For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)

This property accepts custom HTML as a string.
Content is parsed as plaintext by default.
`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config
before custom HTML can be used.
   */
  message?: IonicSafeString | string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The subtitle in the heading of the alert. Displayed under the title.
   */
  subHeader: string;
  /**
   * If `true`, the alert will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
  /**
   * An ID corresponding to the trigger element that
causes the alert to open when clicked.
   */
  trigger?: string | undefined;
}
export interface IonAppProps {}
export interface IonAvatarProps {}
export interface IonBackButtonProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The url to navigate back to by default when there is no history.
   */
  defaultHref: string;
  /**
   * If `true`, the user cannot interact with the button.
   * @default false
   */
  disabled: boolean;
  /**
   * The built-in named SVG icon name or the exact `src` of an SVG file
to use for the back button.
   */
  icon?: null | string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * When using a router, it specifies the transition animation when navigating to
another page.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The text to display in the back button.
   */
  text?: null | string | undefined;
  /**
   * The type of the button.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
}
export interface IonBackdropProps {
  /**
   * If `true`, the backdrop will stop propagation on tap.
   * @default true
   */
  stopPropagation: boolean;
  /**
   * If `true`, the backdrop will can be clicked and will emit the `ionBackdropTap` event.
   * @default true
   */
  tappable: boolean;
  /**
   * If `true`, the backdrop will be visible.
   * @default true
   */
  visible: boolean;
}
export interface IonBadgeProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonBreadcrumbProps {
  /**
   * If `true`, the breadcrumb will take on a different look to show that
it is the currently active breadcrumb. Defaults to `true` for the
last breadcrumb if it is not set on any.
   * @default false
   */
  active: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the breadcrumb.
   * @default false
   */
  disabled: boolean;
  /**
   * This attribute instructs browsers to download a URL instead of navigating to
it, so the user will be prompted to save it as a local file. If the attribute
has a value, it is used as the pre-filled file name in the Save prompt
(the user can still change the file name if they want).
   */
  download?: string | undefined;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * When using a router, it specifies the transition animation when navigating to
another page using `href`.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * When using a router, it specifies the transition direction when navigating to
another page using `href`.
   * @default 'forward'
   */
  routerDirection: 'back' | 'forward' | 'root';
  /**
   * If true, show a separator between this breadcrumb and the next.
Defaults to `true` for all breadcrumbs except the last.
   */
  separator?: boolean | undefined;
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
}
export interface IonBreadcrumbsProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The number of breadcrumbs to show after the collapsed indicator.
If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,
the breadcrumbs will not be collapsed.
   * @default 1
   */
  itemsAfterCollapse: number;
  /**
   * The number of breadcrumbs to show before the collapsed indicator.
If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,
the breadcrumbs will not be collapsed.
   * @default 1
   */
  itemsBeforeCollapse: number;
  /**
   * The maximum number of breadcrumbs to show before collapsing.
   */
  maxItems: number;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonButtonProps {
  /**
   * The type of button.
   * @default 'button'
   */
  buttonType: string;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the button.
   * @default false
   */
  disabled: boolean;
  /**
   * This attribute instructs browsers to download a URL instead of navigating to
it, so the user will be prompted to save it as a local file. If the attribute
has a value, it is used as the pre-filled file name in the Save prompt
(the user can still change the file name if they want).
   */
  download?: string | undefined;
  /**
   * Set to `"block"` for a full-width button or to `"full"` for a full-width button
with square corners and no left or right borders.
   */
  expand?: 'block' | 'full' | undefined;
  /**
   * Set to `"clear"` for a transparent button that resembles a flat button, to `"outline"`
for a transparent button with a border, or to `"solid"` for a button with a filled background.
The default fill is `"solid"` except inside of a toolbar, where the default is `"clear"`.
   */
  fill?: 'clear' | 'default' | 'outline' | 'solid' | undefined;
  /**
   * The HTML form element or form element id. Used to submit a form when the button is not a child of the form.
   */
  form?: HTMLFormElement | string | undefined;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * When using a router, it specifies the transition animation when navigating to
another page using `href`.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * When using a router, it specifies the transition direction when navigating to
another page using `href`.
   * @default 'forward'
   */
  routerDirection: 'back' | 'forward' | 'root';
  /**
   * Set to `"round"` for a button with more rounded corners.
   */
  shape?: 'round' | undefined;
  /**
   * Set to `"small"` for a button with less height and padding, to `"default"`
for a button with the default height and padding, or to `"large"` for a button
with more height and padding. By default the size is unset, unless the button
is inside of an item, where the size is `"small"` by default. Set the size to
`"default"` inside of an item to make it a standard size button.
   */
  size?: 'default' | 'large' | 'small' | undefined;
  /**
   * If `true`, activates a button with a heavier font weight.
   * @default false
   */
  strong: boolean;
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
  /**
   * The type of the button.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
}
export interface IonButtonsProps {
  /**
   * If true, buttons will disappear when its
parent toolbar has fully collapsed if the toolbar
is not the first toolbar. If the toolbar is the
first toolbar, the buttons will be hidden and will
only be shown once all toolbars have fully collapsed.

Only applies in `ios` mode with `collapse` set to
`true` on `ion-header`.

Typically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)
   * @default false
   */
  collapse: boolean;
}
export interface IonCardProps {
  /**
   * If `true`, a button tag will be rendered and the card will be tappable.
   * @default false
   */
  button: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the card.
   * @default false
   */
  disabled: boolean;
  /**
   * This attribute instructs browsers to download a URL instead of navigating to
it, so the user will be prompted to save it as a local file. If the attribute
has a value, it is used as the pre-filled file name in the Save prompt
(the user can still change the file name if they want).
   */
  download?: string | undefined;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * When using a router, it specifies the transition animation when navigating to
another page using `href`.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * When using a router, it specifies the transition direction when navigating to
another page using `href`.
   * @default 'forward'
   */
  routerDirection: 'back' | 'forward' | 'root';
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
  /**
   * The type of the button. Only used when an `onclick` or `button` property is present.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
}
export interface IonCardContentProps {
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonCardHeaderProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the card header will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
}
export interface IonCardSubtitleProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonCardTitleProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonCheckboxProps {
  /**
   * How to control the alignment of the checkbox and label on the cross axis.
`"start"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.
`"center"`: The label and control will appear at the center of the cross axis in both LTR and RTL.
Setting this property will change the checkbox `display` to `block`.
   */
  alignment?: 'center' | 'start' | undefined;
  /**
   * If `true`, the checkbox is selected.
   * @default false
   */
  checked: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the checkbox.
   * @default false
   */
  disabled: boolean;
  /**
   * Text that is placed under the checkbox label and displayed when an error is detected.
   */
  errorText: string;
  /**
   * Text that is placed under the checkbox label and displayed when no error is detected.
   */
  helperText: string;
  /**
   * If `true`, the checkbox will visually appear as indeterminate.
   * @default false
   */
  indeterminate: boolean;
  /**
   * How to pack the label and checkbox within a line.
`"start"`: The label and checkbox will appear on the left in LTR and
on the right in RTL.
`"end"`: The label and checkbox will appear on the right in LTR and
on the left in RTL.
`"space-between"`: The label and checkbox will appear on opposite
ends of the line with space between the two elements.
Setting this property will change the checkbox `display` to `block`.
   */
  justify?: 'end' | 'space-between' | 'start' | undefined;
  /**
   * Where to place the label relative to the checkbox.
`"start"`: The label will appear to the left of the checkbox in LTR and to the right in RTL.
`"end"`: The label will appear to the right of the checkbox in LTR and to the left in RTL.
`"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("...").
`"stacked"`: The label will appear above the checkbox regardless of the direction. The alignment of the label can be controlled with the `alignment` property.
   * @default 'start'
   */
  labelPlacement: 'end' | 'fixed' | 'stacked' | 'start';
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * If true, screen readers will announce it as a required field. This property
works only for accessibility purposes, it will not prevent the form from
submitting if the value is invalid.
   * @default false
   */
  required: boolean;
  /**
   * The value of the checkbox does not mean if it's checked or not, use the `checked`
property for that.

The value of a checkbox is analogous to the value of an `<input type="checkbox">`,
it's only used when the checkbox participates in a native `<form>`.
   * @default 'on'
   */
  value: any;
}
export interface IonChipProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the chip.
   * @default false
   */
  disabled: boolean;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Display an outline style button.
   * @default false
   */
  outline: boolean;
}
export interface IonColProps {
  /**
   * The amount to offset the column, in terms of how many columns it should shift to the end
of the total available.
   */
  offset: string;
  /**
   * The amount to offset the column for lg screens, in terms of how many columns it should shift
to the end of the total available.
   */
  offsetLg: string;
  /**
   * The amount to offset the column for md screens, in terms of how many columns it should shift
to the end of the total available.
   */
  offsetMd: string;
  /**
   * The amount to offset the column for sm screens, in terms of how many columns it should shift
to the end of the total available.
   */
  offsetSm: string;
  /**
   * The amount to offset the column for xl screens, in terms of how many columns it should shift
to the end of the total available.
   */
  offsetXl: string;
  /**
   * The amount to offset the column for xs screens, in terms of how many columns it should shift
to the end of the total available.
   */
  offsetXs: string;
  /**
   * The amount to pull the column, in terms of how many columns it should shift to the start of
the total available.
   */
  pull: string;
  /**
   * The amount to pull the column for lg screens, in terms of how many columns it should shift
to the start of the total available.
   */
  pullLg: string;
  /**
   * The amount to pull the column for md screens, in terms of how many columns it should shift
to the start of the total available.
   */
  pullMd: string;
  /**
   * The amount to pull the column for sm screens, in terms of how many columns it should shift
to the start of the total available.
   */
  pullSm: string;
  /**
   * The amount to pull the column for xl screens, in terms of how many columns it should shift
to the start of the total available.
   */
  pullXl: string;
  /**
   * The amount to pull the column for xs screens, in terms of how many columns it should shift
to the start of the total available.
   */
  pullXs: string;
  /**
   * The amount to push the column, in terms of how many columns it should shift to the end
of the total available.
   */
  push: string;
  /**
   * The amount to push the column for lg screens, in terms of how many columns it should shift
to the end of the total available.
   */
  pushLg: string;
  /**
   * The amount to push the column for md screens, in terms of how many columns it should shift
to the end of the total available.
   */
  pushMd: string;
  /**
   * The amount to push the column for sm screens, in terms of how many columns it should shift
to the end of the total available.
   */
  pushSm: string;
  /**
   * The amount to push the column for xl screens, in terms of how many columns it should shift
to the end of the total available.
   */
  pushXl: string;
  /**
   * The amount to push the column for xs screens, in terms of how many columns it should shift
to the end of the total available.
   */
  pushXs: string;
  /**
   * The size of the column, in terms of how many columns it should take up out of the total
available. If `"auto"` is passed, the column will be the size of its content.
   */
  size: string;
  /**
   * The size of the column for lg screens, in terms of how many columns it should take up out
of the total available. If `"auto"` is passed, the column will be the size of its content.
   */
  sizeLg: string;
  /**
   * The size of the column for md screens, in terms of how many columns it should take up out
of the total available. If `"auto"` is passed, the column will be the size of its content.
   */
  sizeMd: string;
  /**
   * The size of the column for sm screens, in terms of how many columns it should take up out
of the total available. If `"auto"` is passed, the column will be the size of its content.
   */
  sizeSm: string;
  /**
   * The size of the column for xl screens, in terms of how many columns it should take up out
of the total available. If `"auto"` is passed, the column will be the size of its content.
   */
  sizeXl: string;
  /**
   * The size of the column for xs screens, in terms of how many columns it should take up out
of the total available. If `"auto"` is passed, the column will be the size of its content.
   */
  sizeXs: string;
}
export interface IonContentProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * Controls where the fixed content is placed relative to the main content
in the DOM. This can be used to control the order in which fixed elements
receive keyboard focus.
For example, if a FAB in the fixed slot should receive keyboard focus before
the main page content, set this property to `'before'`.
   * @default 'after'
   */
  fixedSlotPlacement: 'after' | 'before';
  /**
   * If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce.
If the content exceeds the bounds of ionContent, nothing will change.
Note, this does not disable the system bounce on iOS. That is an OS level setting.
   */
  forceOverscroll: boolean;
  /**
   * If `true`, the content will scroll behind the headers
and footers. This effect can easily be seen by setting the toolbar
to transparent.
   * @default false
   */
  fullscreen: boolean;
  /**
   * Because of performance reasons, ionScroll events are disabled by default, in order to enable them
and start listening from (ionScroll), set this property to `true`.
   * @default false
   */
  scrollEvents: boolean;
  /**
   * If you want to enable the content scrolling in the X axis, set this property to `true`.
   * @default false
   */
  scrollX: boolean;
  /**
   * If you want to disable the content scrolling in the Y axis, set this property to `false`.
   * @default true
   */
  scrollY: boolean;
}
export interface IonDatetimeProps {
  /**
   * The text to display on the picker's cancel button.
   * @default 'Cancel'
   */
  cancelText: string;
  /**
   * The text to display on the picker's "Clear" button.
   * @default 'Clear'
   */
  clearText: string;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   * @default 'primary'
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * Values used to create the list of selectable days. By default
every day is shown for the given month. However, to control exactly which days of
the month to display, the `dayValues` input can take a number, an array of numbers, or
a string of comma separated numbers. Note that even if the array days have an invalid
number for the selected month, like `31` in February, it will correctly not show
days which are not valid for the selected month.
   */
  dayValues?: number | number[] | string | undefined;
  /**
   * If `true`, the user cannot interact with the datetime.
   * @default false
   */
  disabled: boolean;
  /**
   * The text to display on the picker's "Done" button.
   * @default 'Done'
   */
  doneText: string;
  /**
   * The first day of the week to use for `ion-datetime`. The
default value is `0` and represents Sunday.
   * @default 0
   */
  firstDayOfWeek: number;
  /**
   * Formatting options for dates and times.
Should include a 'date' and/or 'time' object, each of which is of type [Intl.DateTimeFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options).
   */
  formatOptions?: undefined | { date: DateTimeFormatOptions; time?: DateTimeFormatOptions | undefined; } | { date?: DateTimeFormatOptions | undefined; time: DateTimeFormatOptions; };
  /**
   * Used to apply custom text and background colors to specific dates.

Can be either an array of objects containing ISO strings and colors,
or a callback that receives an ISO string and returns the colors.

Only applies to the `date`, `date-time`, and `time-date` presentations,
with `preferWheel="false"`.
   */
  highlightedDates?: ((dateIsoString: string) => DatetimeHighlightStyle | undefined) | DatetimeHighlight[] | undefined;
  /**
   * The hour cycle of the `ion-datetime`. If no value is set, this is
specified by the current locale.
   */
  hourCycle?: 'h11' | 'h12' | 'h23' | 'h24' | undefined;
  /**
   * Values used to create the list of selectable hours. By default
the hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However,
to control exactly which hours to display, the `hourValues` input can take a number, an
array of numbers, or a string of comma separated numbers.
   */
  hourValues?: number | number[] | string | undefined;
  /**
   * Returns if an individual date (calendar day) is enabled or disabled.

If `true`, the day will be enabled/interactive.
If `false`, the day will be disabled/non-interactive.

The function accepts an ISO 8601 date string of a given day.
By default, all days are enabled. Developers can use this function
to write custom logic to disable certain days.

The function is called for each rendered calendar day, for the previous, current and next month.
Custom implementations should be optimized for performance to avoid jank.
   */
  isDateEnabled?: ((dateIsoString: string) => boolean) | undefined;
  /**
   * The locale to use for `ion-datetime`. This
impacts month and day name formatting.
The `"default"` value refers to the default
locale set by your device.
   * @default 'default'
   */
  locale: string;
  /**
   * The maximum datetime allowed. Value must be a date string
following the
[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),
`1996-12-19`. The format does not have to be specific to an exact
datetime. For example, the maximum could just be the year, such as `1994`.
Defaults to the end of this year.
   */
  max: string;
  /**
   * The minimum datetime allowed. Value must be a date string
following the
[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),
such as `1996-12-19`. The format does not have to be specific to an exact
datetime. For example, the minimum could just be the year, such as `1994`.
Defaults to the beginning of the year, 100 years ago from today.
   */
  min: string;
  /**
   * Values used to create the list of selectable minutes. By default
the minutes range from `0` to `59`. However, to control exactly which minutes to display,
the `minuteValues` input can take a number, an array of numbers, or a string of comma
separated numbers. For example, if the minute selections should only be every 15 minutes,
then this input value would be `minuteValues="0,15,30,45"`.
   */
  minuteValues?: number | number[] | string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Values used to create the list of selectable months. By default
the month values range from `1` to `12`. However, to control exactly which months to
display, the `monthValues` input can take a number, an array of numbers, or a string of
comma separated numbers. For example, if only summer months should be shown, then this
input value would be `monthValues="6,7,8"`. Note that month numbers do *not* have a
zero-based index, meaning January's value is `1`, and December's is `12`.
   */
  monthValues?: number | number[] | string | undefined;
  /**
   * If `true`, multiple dates can be selected at once. Only
applies to `presentation="date"` and `preferWheel="false"`.
   * @default false
   */
  multiple: boolean;
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * If `true`, a wheel picker will be rendered instead of a calendar grid
where possible. If `false`, a calendar grid will be rendered instead of
a wheel picker where possible.

A wheel picker can be rendered instead of a grid when `presentation` is
one of the following values: `"date"`, `"date-time"`, or `"time-date"`.

A wheel picker will always be rendered regardless of
the `preferWheel` value when `presentation` is one of the following values:
`"time"`, `"month"`, `"month-year"`, or `"year"`.
   * @default false
   */
  preferWheel: boolean;
  /**
   * Which values you want to select. `"date"` will show
a calendar picker to select the month, day, and year. `"time"`
will show a time picker to select the hour, minute, and (optionally)
AM/PM. `"date-time"` will show the date picker first and time picker second.
`"time-date"` will show the time picker first and date picker second.
   * @default 'date-time'
   */
  presentation: 'date' | 'date-time' | 'month' | 'month-year' | 'time' | 'time-date' | 'year';
  /**
   * If `true`, the datetime appears normal but the selected date cannot be changed.
   * @default false
   */
  readonly: boolean;
  /**
   * If `true`, a "Clear" button will be rendered alongside
the default "Cancel" and "OK" buttons at the bottom of the `ion-datetime`
component. Developers can also use the `button` slot
if they want to customize these buttons. If custom
buttons are set in the `button` slot then the
default buttons will not be rendered.
   * @default false
   */
  showClearButton: boolean;
  /**
   * If `true`, the default "Cancel" and "OK" buttons
will be rendered at the bottom of the `ion-datetime`
component. Developers can also use the `button` slot
if they want to customize these buttons. If custom
buttons are set in the `button` slot then the
default buttons will not be rendered.
   * @default false
   */
  showDefaultButtons: boolean;
  /**
   * If `true`, the default "Time" label will be rendered
for the time selector of the `ion-datetime` component.
Developers can also use the `time-label` slot
if they want to customize this label. If a custom
label is set in the `time-label` slot then the
default label will not be rendered.
   * @default true
   */
  showDefaultTimeLabel: boolean;
  /**
   * If `true`, a header will be shown above the calendar
picker. This will include both the slotted title, and
the selected date.
   * @default false
   */
  showDefaultTitle: boolean;
  /**
   * If `cover`, the `ion-datetime` will expand to cover the full width of its container.
If `fixed`, the `ion-datetime` will have a fixed width.
   * @default 'fixed'
   */
  size: 'cover' | 'fixed';
  /**
   * A callback used to format the header text that shows how many
dates are selected. Only used if there are 0 or more than 1
selected (i.e. unused for exactly 1). By default, the header
text is set to "numberOfDates days".

See https://ionicframework.com/docs/troubleshooting/runtime#accessing-this
if you need to access `this` from within the callback.
   */
  titleSelectedDatesFormatter?: ((selectedDates: string[]) => string) | undefined;
  /**
   * The value of the datetime as a valid ISO 8601 datetime string.
This should be an array of strings only when `multiple="true"`.
   */
  value?: null | string | string[] | undefined;
  /**
   * Values used to create the list of selectable years. By default
the year values range between the `min` and `max` datetime inputs. However, to
control exactly which years to display, the `yearValues` input can take a number, an array
of numbers, or string of comma separated numbers. For example, to show upcoming and
recent leap years, then this input's value would be `yearValues="2008,2012,2016,2020,2024"`.
   */
  yearValues?: number | number[] | string | undefined;
}
export interface IonDatetimeButtonProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   * @default 'primary'
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The ID of the `ion-datetime` instance
associated with the datetime button.
   */
  datetime: string;
  /**
   * If `true`, the user cannot interact with the button.
   * @default false
   */
  disabled: boolean;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonFabProps {
  /**
   * If `true`, both the `ion-fab-button` and all `ion-fab-list` inside `ion-fab` will become active.
That means `ion-fab-button` will become a `close` icon and `ion-fab-list` will become visible.
   * @default false
   */
  activated: boolean;
  /**
   * If `true`, the fab will display on the edge of the header if
`vertical` is `"top"`, and on the edge of the footer if
it is `"bottom"`. Should be used with a `fixed` slot.
   * @default false
   */
  edge: boolean;
  /**
   * Where to align the fab horizontally in the viewport.
   */
  horizontal?: 'center' | 'end' | 'start' | undefined;
  /**
   * Where to align the fab vertically in the viewport.
   */
  vertical?: 'bottom' | 'center' | 'top' | undefined;
}
export interface IonFabButtonProps {
  /**
   * If `true`, the fab button will be show a close icon.
   * @default false
   */
  activated: boolean;
  /**
   * The icon name to use for the close icon. This will appear when the fab button
is pressed. Only applies if it is the main button inside of a fab containing a
fab list.
   * @default close
   */
  closeIcon: string;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the fab button.
   * @default false
   */
  disabled: boolean;
  /**
   * This attribute instructs browsers to download a URL instead of navigating to
it, so the user will be prompted to save it as a local file. If the attribute
has a value, it is used as the pre-filled file name in the Save prompt
(the user can still change the file name if they want).
   */
  download?: string | undefined;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * When using a router, it specifies the transition animation when navigating to
another page using `href`.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * When using a router, it specifies the transition direction when navigating to
another page using `href`.
   * @default 'forward'
   */
  routerDirection: 'back' | 'forward' | 'root';
  /**
   * If `true`, the fab button will show when in a fab-list.
   * @default false
   */
  show: boolean;
  /**
   * The size of the button. Set this to `small` in order to have a mini fab button.
   */
  size?: 'small' | undefined;
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
  /**
   * If `true`, the fab button will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
  /**
   * The type of the button.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
}
export interface IonFabListProps {
  /**
   * If `true`, the fab list will show all fab buttons in the list.
   * @default false
   */
  activated: boolean;
  /**
   * The side the fab list will show on relative to the main fab button.
   * @default 'bottom'
   */
  side: 'bottom' | 'end' | 'start' | 'top';
}
export interface IonFooterProps {
  /**
   * Describes the scroll effect that will be applied to the footer.
Only applies in iOS mode.
   */
  collapse?: 'fade' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the footer will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).

Note: In order to scroll content behind the footer, the `fullscreen`
attribute needs to be set on the content.
   * @default false
   */
  translucent: boolean;
}
export interface IonGridProps {
  /**
   * If `true`, the grid will have a fixed width based on the screen size.
   * @default false
   */
  fixed: boolean;
}
export interface IonHeaderProps {
  /**
   * Describes the scroll effect that will be applied to the header.
Only applies in iOS mode.

Typically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)
   */
  collapse?: 'condense' | 'fade' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the header will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).

Note: In order to scroll content behind the header, the `fullscreen`
attribute needs to be set on the content.
   * @default false
   */
  translucent: boolean;
}
export interface IonImgProps {
  /**
   * This attribute defines the alternative text describing the image.
Users will see this text displayed if the image URL is wrong,
the image is not in one of the supported formats, or if the image is not yet downloaded.
   */
  alt: string;
  /**
   * The image URL. This attribute is mandatory for the `<img>` element.
   */
  src: string;
}
export interface IonInfiniteScrollProps {
  /**
   * If `true`, the infinite scroll will be hidden and scroll event listeners
will be removed.

Set this to true to disable the infinite scroll from actively
trying to receive new data while scrolling. This is useful
when it is known that there is no more data that can be added, and
the infinite scroll is no longer needed.
   * @default false
   */
  disabled: boolean;
  /**
   * The position of the infinite scroll element.
The value can be either `top` or `bottom`.
   * @default 'bottom'
   */
  position: 'bottom' | 'top';
  /**
   * The threshold distance from the bottom
of the content to call the `infinite` output event when scrolled.
The threshold value can be either a percent, or
in pixels. For example, use the value of `10%` for the `infinite`
output event to get called when the user has scrolled 10%
from the bottom of the page. Use the value `100px` when the
scroll is within 100 pixels from the bottom of the page.
   * @default '15%'
   */
  threshold: string;
}
export interface IonInfiniteScrollContentProps {
  /**
   * An animated SVG spinner that shows while loading.
   */
  loadingSpinner?: 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-sharp' | 'lines-sharp-small' | 'lines-small' | undefined;
  /**
   * Optional text to display while loading.
`loadingText` can accept either plaintext or HTML as a string.
To display characters normally reserved for HTML, they
must be escaped. For example `<Ionic>` would become
`&lt;Ionic&gt;`

For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)

This property accepts custom HTML as a string.
Content is parsed as plaintext by default.
`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config
before custom HTML can be used.
   */
  loadingText?: IonicSafeString | string | undefined;
}
export interface IonInputProps {
  /**
   * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
   * @default 'off'
   */
  autocapitalize: string;
  /**
   * Indicates whether the value of the control can be automatically completed by the browser.
   * @default 'off'
   */
  autocomplete: 'name' | 'email' | 'tel' | 'url' | 'on' | 'off' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix' | 'nickname' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization' | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2' | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'cc-name' | 'cc-given-name' | 'cc-additional-name' | 'cc-family-name' | 'cc-number' | 'cc-exp' | 'cc-exp-month' | 'cc-exp-year' | 'cc-csc' | 'cc-type' | 'transaction-currency' | 'transaction-amount' | 'language' | 'bday' | 'bday-day' | 'bday-month' | 'bday-year' | 'sex' | 'tel-country-code' | 'tel-national' | 'tel-area-code' | 'tel-local' | 'tel-extension' | 'impp' | 'photo';
  /**
   * Whether auto correction should be enabled when the user is entering/editing the text value.
   * @default 'off'
   */
  autocorrect: 'off' | 'on';
  /**
   * Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.

This may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.
   * @default false
   */
  autofocus: boolean;
  /**
   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
   * @default false
   */
  clearInput: boolean;
  /**
   * The icon to use for the clear button. Only applies when `clearInput` is set to `true`.
   */
  clearInputIcon: string;
  /**
   * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
   */
  clearOnEdit: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.
   * @default false
   */
  counter: boolean;
  /**
   * A callback used to format the counter text.
By default the counter text is set to "itemLength / maxLength".

See https://ionicframework.com/docs/troubleshooting/runtime#accessing-this
if you need to access `this` from within the callback.
   */
  counterFormatter?: ((inputLength: number, maxLength: number) => string) | undefined;
  /**
   * Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.
   */
  debounce: number;
  /**
   * If `true`, the user cannot interact with the input.
   * @default false
   */
  disabled: boolean;
  /**
   * A hint to the browser for which enter key to display.
Possible values: `"enter"`, `"done"`, `"go"`, `"next"`,
`"previous"`, `"search"`, and `"send"`.
   */
  enterkeyhint?: 'done' | 'enter' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined;
  /**
   * Text that is placed under the input and displayed when an error is detected.
   */
  errorText: string;
  /**
   * The fill for the item. If `"solid"` the item will have a background. If
`"outline"` the item will be transparent with a border. Only available in `md` mode.
   */
  fill?: 'outline' | 'solid' | undefined;
  /**
   * Text that is placed under the input and displayed when no error is detected.
   */
  helperText: string;
  /**
   * A hint to the browser for which keyboard to display.
Possible values: `"none"`, `"text"`, `"tel"`, `"url"`,
`"email"`, `"numeric"`, `"decimal"`, and `"search"`.
   */
  inputmode?: 'decimal' | 'email' | 'none' | 'numeric' | 'search' | 'tel' | 'text' | 'url' | undefined;
  /**
   * The visible label associated with the input.

Use this if you need to render a plaintext label.

The `label` property will take priority over the `label` slot if both are used.
   */
  label: string;
  /**
   * Where to place the label relative to the input.
`"start"`: The label will appear to the left of the input in LTR and to the right in RTL.
`"end"`: The label will appear to the right of the input in LTR and to the left in RTL.
`"floating"`: The label will appear smaller and above the input when the input is focused or it has a value. Otherwise it will appear on top of the input.
`"stacked"`: The label will appear smaller and above the input regardless even when the input is blurred or has no value.
`"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("...").
   * @default 'start'
   */
  labelPlacement: 'end' | 'fixed' | 'floating' | 'stacked' | 'start';
  /**
   * The maximum value, which must not be less than its minimum (min attribute) value.
   */
  max?: number | string | undefined;
  /**
   * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
   */
  maxlength: number;
  /**
   * The minimum value, which must not be greater than its maximum (max attribute) value.
   */
  min?: number | string | undefined;
  /**
   * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
   */
  minlength: number;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"`, otherwise it is ignored.
   */
  multiple: boolean;
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
   */
  pattern: string;
  /**
   * Instructional text that shows before the input has a value.
This property applies only when the `type` property is set to `"email"`,
`"number"`, `"password"`, `"search"`, `"tel"`, `"text"`, or `"url"`, otherwise it is ignored.
   */
  placeholder: string;
  /**
   * If `true`, the user cannot modify the value.
   * @default false
   */
  readonly: boolean;
  /**
   * If `true`, the user must fill in a value before submitting a form.
   * @default false
   */
  required: boolean;
  /**
   * The shape of the input. If "round" it will have an increased border radius.
   */
  shape?: 'round' | undefined;
  /**
   * If `true`, the element will have its spelling and grammar checked.
   * @default false
   */
  spellcheck: boolean;
  /**
   * Works with the min and max attributes to limit the increments at which a value can be set.
Possible values are: `"any"` or a positive floating point number.
   */
  step: string;
  /**
   * The type of control to display. The default type is text.
   * @default 'text'
   */
  type: 'date' | 'datetime-local' | 'email' | 'month' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'time' | 'url' | 'week';
  /**
   * The value of the input.
   * @default ''
   */
  value?: null | number | string | undefined;
}
export interface IonInputPasswordToggleProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The icon that can be used to represent hiding a password. If not set, the "eyeOff" Ionicon will be used.
   */
  hideIcon: string;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The icon that can be used to represent showing a password. If not set, the "eye" Ionicon will be used.
   */
  showIcon: string;
}
export interface IonItemProps {
  /**
   * If `true`, a button tag will be rendered and the item will be tappable.
   * @default false
   */
  button: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode`
is `ios` and an `href` or `button` property is present.
   */
  detail: boolean;
  /**
   * The icon to use when `detail` is set to `true`.
   * @default chevronForward
   */
  detailIcon: string;
  /**
   * If `true`, the user cannot interact with the item.
   * @default false
   */
  disabled: boolean;
  /**
   * This attribute instructs browsers to download a URL instead of navigating to
it, so the user will be prompted to save it as a local file. If the attribute
has a value, it is used as the pre-filled file name in the Save prompt
(the user can still change the file name if they want).
   */
  download?: string | undefined;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * How the bottom border should be displayed on the item.
   */
  lines?: 'full' | 'inset' | 'none' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * When using a router, it specifies the transition animation when navigating to
another page using `href`.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * When using a router, it specifies the transition direction when navigating to
another page using `href`.
   * @default 'forward'
   */
  routerDirection: 'back' | 'forward' | 'root';
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
  /**
   * The type of the button. Only used when an `onclick` or `button` property is present.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
}
export interface IonItemDividerProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * When it's set to `true`, the item-divider will stay visible when it reaches the top
of the viewport until the next `ion-item-divider` replaces it.

This feature relies in `position:sticky`:
https://caniuse.com/#feat=css-sticky
   * @default false
   */
  sticky: boolean;
}
export interface IonItemGroupProps {}
export interface IonItemOptionProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the item option.
   * @default false
   */
  disabled: boolean;
  /**
   * This attribute instructs browsers to download a URL instead of navigating to
it, so the user will be prompted to save it as a local file. If the attribute
has a value, it is used as the pre-filled file name in the Save prompt
(the user can still change the file name if they want).
   */
  download?: string | undefined;
  /**
   * If `true`, the option will expand to take up the available width and cover any other options.
   * @default false
   */
  expandable: boolean;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
  /**
   * The type of the button.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
}
export interface IonItemOptionsProps {
  /**
   * The side the option button should be on. Possible values: `"start"` and `"end"`. If you have multiple `ion-item-options`, a side must be provided for each.
   * @default 'end'
   */
  side: 'end' | 'start';
}
export interface IonItemSlidingProps {
  /**
   * If `true`, the user cannot interact with the sliding item.
   * @default false
   */
  disabled: boolean;
}
export interface IonLabelProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The position determines where and how the label behaves inside an item.
   */
  position?: 'fixed' | 'floating' | 'stacked' | undefined;
}
export interface IonListProps {
  /**
   * If `true`, the list will have margin around it and rounded corners.
   * @default false
   */
  inset: boolean;
  /**
   * How the bottom border should be displayed on all items.
   */
  lines?: 'full' | 'inset' | 'none' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonListHeaderProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * How the bottom border should be displayed on the list header.
   */
  lines?: 'full' | 'inset' | 'none' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonLoadingProps {
  /**
   * If `true`, the loading indicator will animate.
   * @default true
   */
  animated: boolean;
  /**
   * If `true`, the loading indicator will be dismissed when the backdrop is clicked.
   * @default false
   */
  backdropDismiss: boolean;
  /**
   * Additional classes to apply for custom CSS. If multiple classes are
provided they should be separated by spaces.
   */
  cssClass?: string | string[] | undefined;
  /**
   * Number of milliseconds to wait before dismissing the loading indicator.
   * @default 0
   */
  duration: number;
  /**
   * Animation to use when the loading indicator is presented.
   */
  enterAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Additional attributes to pass to the loader.
   */
  htmlAttributes?: undefined | { [key: string]: any; };
  /**
   * If `true`, the loading indicator will open. If `false`, the loading indicator will close.
Use this if you need finer grained control over presentation, otherwise
just use the loadingController or the `trigger` property.
Note: `isOpen` will not automatically be set back to `false` when
the loading indicator dismisses. You will need to do that in your code.
   * @default false
   */
  isOpen: boolean;
  /**
   * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
   * @default true
   */
  keyboardClose: boolean;
  /**
   * Animation to use when the loading indicator is dismissed.
   */
  leaveAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Optional text content to display in the loading indicator.

This property accepts custom HTML as a string.
Content is parsed as plaintext by default.
`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config
before custom HTML can be used.
   */
  message?: IonicSafeString | string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, a backdrop will be displayed behind the loading indicator.
   * @default true
   */
  showBackdrop: boolean;
  /**
   * The name of the spinner to display.
   */
  spinner?: 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-sharp' | 'lines-sharp-small' | 'lines-small' | undefined;
  /**
   * If `true`, the loading indicator will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
  /**
   * An ID corresponding to the trigger element that
causes the loading indicator to open when clicked.
   */
  trigger?: string | undefined;
}
export interface IonMenuProps {
  /**
   * The `id` of the main content. When using
a router this is typically `ion-router-outlet`.
When not using a router, this is typically
your main view's `ion-content`. This is not the
id of the `ion-content` inside of your `ion-menu`.
   */
  contentId: string;
  /**
   * If `true`, the menu is disabled.
   * @default false
   */
  disabled: boolean;
  /**
   * The edge threshold for dragging the menu open.
If a drag/swipe happens over this value, the menu is not triggered.
   * @default 50
   */
  maxEdgeStart: number;
  /**
   * An id for the menu.
   */
  menuId: string;
  /**
   * Which side of the view the menu should be placed.
   * @default 'start'
   */
  side: 'end' | 'start';
  /**
   * If `true`, swiping the menu is enabled.
   * @default true
   */
  swipeGesture: boolean;
  /**
   * The display type of the menu.
Available options: `"overlay"`, `"reveal"`, `"push"`.
   */
  type?: 'overlay' | 'push' | 'reveal' | undefined;
}
export interface IonMenuButtonProps {
  /**
   * Automatically hides the menu button when the corresponding menu is not active
   * @default true
   */
  autoHide: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the menu button.
   * @default false
   */
  disabled: boolean;
  /**
   * Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle
   */
  menu: string;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The type of the button.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
}
export interface IonMenuToggleProps {
  /**
   * Automatically hides the content when the corresponding menu is not active.

By default, it's `true`. Change it to `false` in order to
keep `ion-menu-toggle` always visible regardless the state of the menu.
   * @default true
   */
  autoHide: boolean;
  /**
   * Optional property that maps to a Menu's `menuId` prop.
Can also be `start` or `end` for the menu side.
This is used to find the correct menu to toggle.

If this property is not used, `ion-menu-toggle` will toggle the
first menu that is active.
   */
  menu: string;
}
export interface IonModalProps {
  /**
   * If `true`, the modal will animate.
   * @default true
   */
  animated: boolean;
  /**
   * A decimal value between 0 and 1 that indicates the
point after which the backdrop will begin to fade in
when using a sheet modal. Prior to this point, the
backdrop will be hidden and the content underneath
the sheet can be interacted with. This value is exclusive
meaning the backdrop will become active after the value
specified.
   * @default 0
   */
  backdropBreakpoint: number;
  /**
   * If `true`, the modal will be dismissed when the backdrop is clicked.
   * @default true
   */
  backdropDismiss: boolean;
  /**
   * The breakpoints to use when creating a sheet modal. Each value in the
array must be a decimal between 0 and 1 where 0 indicates the modal is fully
closed and 1 indicates the modal is fully open. Values are relative
to the height of the modal, not the height of the screen. One of the values in this
array must be the value of the `initialBreakpoint` property.
For example: [0, .25, .5, 1]
   */
  breakpoints?: number[] | undefined;
  /**
   * Determines whether or not a modal can dismiss
when calling the `dismiss` method.

If the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss.
If the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.

See https://ionicframework.com/docs/troubleshooting/runtime#accessing-this
if you need to access `this` from within the callback.
   * @default true
   */
  canDismiss?: ((data?: any, role?: string | undefined) => Promise<boolean>) | boolean;
  /**
   * Animation to use when the modal is presented.
   */
  enterAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Controls whether scrolling or dragging within the sheet modal expands
it to a larger breakpoint. This only takes effect when `breakpoints`
and `initialBreakpoint` are set.

If `true`, scrolling or dragging anywhere in the modal will first expand
it to the next breakpoint. Once fully expanded, scrolling will affect the
content.
If `false`, scrolling will always affect the content. The modal will
only expand when dragging the header or handle. The modal will close when
dragging the header or handle. It can also be closed when dragging the
content, but only if the content is scrolled to the top.
   * @default true
   */
  expandToScroll: boolean;
  /**
   * If `true`, focus will not be allowed to move outside of this overlay.
If `false`, focus will be allowed to move outside of the overlay.

In most scenarios this property should remain set to `true`. Setting
this property to `false` can cause severe accessibility issues as users
relying on assistive technologies may be able to move focus into
a confusing state. We recommend only setting this to `false` when
absolutely necessary.

Developers may want to consider disabling focus trapping if this
overlay presents a non-Ionic overlay from a 3rd party library.
Developers would disable focus trapping on the Ionic overlay
when presenting the 3rd party overlay and then re-enable
focus trapping when dismissing the 3rd party overlay and moving
focus back to the Ionic overlay.
   * @default true
   */
  focusTrap: boolean;
  /**
   * The horizontal line that displays at the top of a sheet modal. It is `true` by default when
setting the `breakpoints` and `initialBreakpoint` properties.
   */
  handle: boolean;
  /**
   * The interaction behavior for the sheet modal when the handle is pressed.

Defaults to `"none"`, which  means the modal will not change size or position when the handle is pressed.
Set to `"cycle"` to let the modal cycle between available breakpoints when pressed.

Handle behavior is unavailable when the `handle` property is set to `false` or
when the `breakpoints` property is not set (using a fullscreen or card modal).
   * @default 'none'
   */
  handleBehavior?: 'cycle' | 'none' | undefined;
  /**
   * Additional attributes to pass to the modal.
   */
  htmlAttributes?: undefined | { [key: string]: any; };
  /**
   * A decimal value between 0 and 1 that indicates the
initial point the modal will open at when creating a
sheet modal. This value must also be listed in the
`breakpoints` array.
   */
  initialBreakpoint: number;
  /**
   * If `true`, the modal will open. If `false`, the modal will close.
Use this if you need finer grained control over presentation, otherwise
just use the modalController or the `trigger` property.
Note: `isOpen` will not automatically be set back to `false` when
the modal dismisses. You will need to do that in your code.
   * @default false
   */
  isOpen: boolean;
  /**
   * If `true`, the component passed into `ion-modal` will
automatically be mounted when the modal is created. The
component will remain mounted even when the modal is dismissed.
However, the component will be destroyed when the modal is
destroyed. This property is not reactive and should only be
used when initially creating a modal.

Note: This feature only applies to inline modals in JavaScript
frameworks such as Angular, React, and Vue.
   * @default false
   */
  keepContentsMounted: boolean;
  /**
   * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
   * @default true
   */
  keyboardClose: boolean;
  /**
   * Animation to use when the modal is dismissed.
   */
  leaveAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The element that presented the modal. This is used for card presentation effects
and for stacking multiple modals on top of each other. Only applies in iOS mode.
   */
  presentingElement?: HTMLElement | undefined;
  /**
   * If `true`, a backdrop will be displayed behind the modal.
This property controls whether or not the backdrop
darkens the screen when the modal is presented.
It does not control whether or not the backdrop
is active or present in the DOM.
   * @default true
   */
  showBackdrop: boolean;
  /**
   * An ID corresponding to the trigger element that
causes the modal to open when clicked.
   */
  trigger?: string | undefined;
}
export interface IonNavProps {
  /**
   * If `true`, the nav should animate the transition of components.
   * @default true
   */
  animated: boolean;
  /**
   * By default `ion-nav` animates transition between pages based in the mode (ios or material design).
However, this property allows to create custom transition using `AnimationBuilder` functions.
   */
  animation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Root NavComponent to load
   */
  root?: Function | HTMLElement | ViewController | null | string | undefined;
  /**
   * Any parameters for the root component
   */
  rootParams?: undefined | { [key: string]: any; };
  /**
   * If the nav component should allow for swipe-to-go-back.
   */
  swipeGesture: boolean;
}
export interface IonNavLinkProps {
  /**
   * Component to navigate to. Only used if the `routerDirection` is `"forward"` or `"root"`.
   */
  component?: Function | HTMLElement | ViewController | null | string | undefined;
  /**
   * Data you want to pass to the component as props. Only used if the `"routerDirection"` is `"forward"` or `"root"`.
   */
  componentProps?: undefined | { [key: string]: any; };
  /**
   * The transition animation when navigating to another page.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The transition direction when navigating to another page.
   * @default 'forward'
   */
  routerDirection: 'back' | 'forward' | 'root';
}
export interface IonNoteProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonPickerProps {
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonPickerColumnProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   * @default 'primary'
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the picker.
   * @default false
   */
  disabled: boolean;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The selected option in the picker.
   */
  value?: number | string | undefined;
}
export interface IonPickerColumnOptionProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   * @default 'primary'
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the picker column option.
   * @default false
   */
  disabled: boolean;
  /**
   * The text value of the option.
   */
  value: any;
}
export interface IonPickerLegacyProps {
  /**
   * If `true`, the picker will animate.
   * @default true
   */
  animated: boolean;
  /**
   * If `true`, the picker will be dismissed when the backdrop is clicked.
   * @default true
   */
  backdropDismiss: boolean;
  /**
   * Array of buttons to be displayed at the top of the picker.
   * @default []
   */
  buttons: PickerButton[];
  /**
   * Array of columns to be displayed in the picker.
   * @default []
   */
  columns: PickerColumn[];
  /**
   * Additional classes to apply for custom CSS. If multiple classes are
provided they should be separated by spaces.
   */
  cssClass?: string | string[] | undefined;
  /**
   * Number of milliseconds to wait before dismissing the picker.
   * @default 0
   */
  duration: number;
  /**
   * Animation to use when the picker is presented.
   */
  enterAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Additional attributes to pass to the picker.
   */
  htmlAttributes?: undefined | { [key: string]: any; };
  /**
   * If `true`, the picker will open. If `false`, the picker will close.
Use this if you need finer grained control over presentation, otherwise
just use the pickerController or the `trigger` property.
Note: `isOpen` will not automatically be set back to `false` when
the picker dismisses. You will need to do that in your code.
   * @default false
   */
  isOpen: boolean;
  /**
   * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
   * @default true
   */
  keyboardClose: boolean;
  /**
   * Animation to use when the picker is dismissed.
   */
  leaveAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, a backdrop will be displayed behind the picker.
   * @default true
   */
  showBackdrop: boolean;
  /**
   * An ID corresponding to the trigger element that
causes the picker to open when clicked.
   */
  trigger?: string | undefined;
}
export interface IonPopoverProps {
  /**
   * Describes how to align the popover content with the `reference` point.
Defaults to `"center"` for `ios` mode, and `"start"` for `md` mode.
   */
  alignment?: 'center' | 'end' | 'start' | undefined;
  /**
   * If `true`, the popover will animate.
   * @default true
   */
  animated: boolean;
  /**
   * If `true`, the popover will display an arrow that points at the
`reference` when running in `ios` mode. Does not apply in `md` mode.
   * @default true
   */
  arrow: boolean;
  /**
   * If `true`, the popover will be dismissed when the backdrop is clicked.
   * @default true
   */
  backdropDismiss: boolean;
  /**
   * The component to display inside of the popover.
You only need to use this if you are not using
a JavaScript framework. Otherwise, you can just
slot your component inside of `ion-popover`.
   */
  component?: Function | HTMLElement | null | string | undefined;
  /**
   * The data to pass to the popover component.
You only need to use this if you are not using
a JavaScript framework. Otherwise, you can just
set the props directly on your component.
   */
  componentProps?: undefined | { [key: string]: any; };
  /**
   * If `true`, the popover will be automatically
dismissed when the content has been clicked.
   * @default false
   */
  dismissOnSelect: boolean;
  /**
   * Animation to use when the popover is presented.
   */
  enterAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The event to pass to the popover animation.
   */
  event: any;
  /**
   * If `true`, focus will not be allowed to move outside of this overlay.
If `false`, focus will be allowed to move outside of the overlay.

In most scenarios this property should remain set to `true`. Setting
this property to `false` can cause severe accessibility issues as users
relying on assistive technologies may be able to move focus into
a confusing state. We recommend only setting this to `false` when
absolutely necessary.

Developers may want to consider disabling focus trapping if this
overlay presents a non-Ionic overlay from a 3rd party library.
Developers would disable focus trapping on the Ionic overlay
when presenting the 3rd party overlay and then re-enable
focus trapping when dismissing the 3rd party overlay and moving
focus back to the Ionic overlay.
   * @default true
   */
  focusTrap: boolean;
  /**
   * Additional attributes to pass to the popover.
   */
  htmlAttributes?: undefined | { [key: string]: any; };
  /**
   * If `true`, the popover will open. If `false`, the popover will close.
Use this if you need finer grained control over presentation, otherwise
just use the popoverController or the `trigger` property.
Note: `isOpen` will not automatically be set back to `false` when
the popover dismisses. You will need to do that in your code.
   * @default false
   */
  isOpen: boolean;
  /**
   * If `true`, the component passed into `ion-popover` will
automatically be mounted when the popover is created. The
component will remain mounted even when the popover is dismissed.
However, the component will be destroyed when the popover is
destroyed. This property is not reactive and should only be
used when initially creating a popover.

Note: This feature only applies to inline popovers in JavaScript
frameworks such as Angular, React, and Vue.
   * @default false
   */
  keepContentsMounted: boolean;
  /**
   * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
   * @default true
   */
  keyboardClose: boolean;
  /**
   * Animation to use when the popover is dismissed.
   */
  leaveAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Describes what to position the popover relative to.
If `"trigger"`, the popover will be positioned relative
to the trigger button. If passing in an event, this is
determined via event.target.
If `"event"`, the popover will be positioned relative
to the x/y coordinates of the trigger action. If passing
in an event, this is determined via event.clientX and event.clientY.
   * @default 'trigger'
   */
  reference: 'event' | 'trigger';
  /**
   * If `true`, a backdrop will be displayed behind the popover.
This property controls whether or not the backdrop
darkens the screen when the popover is presented.
It does not control whether or not the backdrop
is active or present in the DOM.
   * @default true
   */
  showBackdrop: boolean;
  /**
   * Describes which side of the `reference` point to position
the popover on. The `"start"` and `"end"` values are RTL-aware,
and the `"left"` and `"right"` values are not.
   * @default 'bottom'
   */
  side: 'bottom' | 'end' | 'left' | 'right' | 'start' | 'top';
  /**
   * Describes how to calculate the popover width.
If `"cover"`, the popover width will match the width of the trigger.
If `"auto"`, the popover width will be set to a static default value.
   * @default 'auto'
   */
  size: 'auto' | 'cover';
  /**
   * If `true`, the popover will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
  /**
   * An ID corresponding to the trigger element that
causes the popover to open. Use the `trigger-action`
property to customize the interaction that results in
the popover opening.
   */
  trigger?: string | undefined;
  /**
   * Describes what kind of interaction with the trigger that
should cause the popover to open. Does not apply when the `trigger`
property is `undefined`.
If `"click"`, the popover will be presented when the trigger is left clicked.
If `"hover"`, the popover will be presented when a pointer hovers over the trigger.
If `"context-menu"`, the popover will be presented when the trigger is right
clicked on desktop and long pressed on mobile. This will also prevent your
device's normal context menu from appearing.
   * @default 'click'
   */
  triggerAction: 'click' | 'context-menu' | 'hover';
}
export interface IonProgressBarProps {
  /**
   * If the buffer and value are smaller than 1, the buffer circles will show.
The buffer should be between [0, 1].
   * @default 1
   */
  buffer: number;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If true, reverse the progress bar direction.
   * @default false
   */
  reversed: boolean;
  /**
   * The state of the progress bar, based on if the time the process takes is known or not.
Default options are: `"determinate"` (no animation), `"indeterminate"` (animate from left to right).
   * @default 'determinate'
   */
  type: 'determinate' | 'indeterminate';
  /**
   * The value determines how much of the active bar should display when the
`type` is `"determinate"`.
The value should be between [0, 1].
   * @default 0
   */
  value: number;
}
export interface IonRadioProps {
  /**
   * How to control the alignment of the radio and label on the cross axis.
`"start"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.
`"center"`: The label and control will appear at the center of the cross axis in both LTR and RTL.
Setting this property will change the radio `display` to `block`.
   */
  alignment?: 'center' | 'start' | undefined;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the radio.
   * @default false
   */
  disabled: boolean;
  /**
   * How to pack the label and radio within a line.
`"start"`: The label and radio will appear on the left in LTR and
on the right in RTL.
`"end"`: The label and radio will appear on the right in LTR and
on the left in RTL.
`"space-between"`: The label and radio will appear on opposite
ends of the line with space between the two elements.
Setting this property will change the radio `display` to `block`.
   */
  justify?: 'end' | 'space-between' | 'start' | undefined;
  /**
   * Where to place the label relative to the radio.
`"start"`: The label will appear to the left of the radio in LTR and to the right in RTL.
`"end"`: The label will appear to the right of the radio in LTR and to the left in RTL.
`"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("...").
`"stacked"`: The label will appear above the radio regardless of the direction. The alignment of the label can be controlled with the `alignment` property.
   * @default 'start'
   */
  labelPlacement: 'end' | 'fixed' | 'stacked' | 'start';
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * the value of the radio.
   */
  value: any;
}
export interface IonRadioGroupProps {
  /**
   * If `true`, the radios can be deselected.
   * @default false
   */
  allowEmptySelection: boolean;
  /**
   * This property allows developers to specify a custom function or property
name for comparing objects when determining the selected option in the
ion-radio-group. When not specified, the default behavior will use strict
equality (===) for comparison.
   */
  compareWith?: ((currentValue: any, compareValue: any) => boolean) | null | string | undefined;
  /**
   * The error text to display at the top of the radio group.
   */
  errorText: string;
  /**
   * The helper text to display at the top of the radio group.
   */
  helperText: string;
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * the value of the radio group.
   */
  value: any;
}
export interface IonRangeProps {
  /**
   * The start position of the range active bar. This feature is only available with a single knob (dualKnobs="false").
Valid values are greater than or equal to the min value and less than or equal to the max value.
   */
  activeBarStart: number;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * How long, in milliseconds, to wait to trigger the
`ionInput` event after each change in the range value.
   */
  debounce: number;
  /**
   * If `true`, the user cannot interact with the range.
   * @default false
   */
  disabled: boolean;
  /**
   * Show two knobs.
   * @default false
   */
  dualKnobs: boolean;
  /**
   * The text to display as the control's label. Use this over the `label` slot if
you only need plain text. The `label` property will take priority over the
`label` slot if both are used.
   */
  label: string;
  /**
   * Where to place the label relative to the range.
`"start"`: The label will appear to the left of the range in LTR and to the right in RTL.
`"end"`: The label will appear to the right of the range in LTR and to the left in RTL.
`"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("...").
`"stacked"`: The label will appear above the range regardless of the direction.
   * @default 'start'
   */
  labelPlacement: 'end' | 'fixed' | 'stacked' | 'start';
  /**
   * Maximum integer value of the range.
   * @default 100
   */
  max: number;
  /**
   * Minimum integer value of the range.
   * @default 0
   */
  min: number;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.rangeId
   */
  name: string;
  /**
   * If `true`, a pin with integer value is shown when the knob
is pressed.
   * @default false
   */
  pin: boolean;
  /**
   * A callback used to format the pin text.
By default the pin text is set to `Math.round(value)`.

See https://ionicframework.com/docs/troubleshooting/runtime#accessing-this
if you need to access `this` from within the callback.
   * @default (value: number): number => Math.round(value)
   */
  pinFormatter: (value: number) => string | number;
  /**
   * If `true`, the knob snaps to tick marks evenly spaced based
on the step property value.
   * @default false
   */
  snaps: boolean;
  /**
   * Specifies the value granularity.
   * @default 1
   */
  step: number;
  /**
   * If `true`, tick marks are displayed based on the step value.
Only applies when `snaps` is `true`.
   * @default true
   */
  ticks: boolean;
  /**
   * the value of the range.
   * @default 0
   */
  value: number | { lower: number; upper: number; };
}
export interface IonRefresherProps {
  /**
   * Time it takes to close the refresher.
Does not apply when the refresher content uses a spinner,
enabling the native refresher.
   * @default '280ms'
   */
  closeDuration: string;
  /**
   * If `true`, the refresher will be hidden.
   * @default false
   */
  disabled: boolean;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * How much to multiply the pull speed by. To slow the pull animation down,
pass a number less than `1`. To speed up the pull, pass a number greater
than `1`. The default value is `1` which is equal to the speed of the cursor.
If a negative value is passed in, the factor will be `1` instead.

For example: If the value passed is `1.2` and the content is dragged by
`10` pixels, instead of `10` pixels the content will be pulled by `12` pixels
(an increase of 20 percent). If the value passed is `0.8`, the dragged amount
will be `8` pixels, less than the amount the cursor has moved.

Does not apply when the refresher content uses a spinner,
enabling the native refresher.
   * @default 1
   */
  pullFactor: number;
  /**
   * The maximum distance of the pull until the refresher
will automatically go into the `refreshing` state.
Defaults to the result of `pullMin + 60`.
Does not apply when  the refresher content uses a spinner,
enabling the native refresher.
   * @default this.pullMin + 60
   */
  pullMax: number;
  /**
   * The minimum distance the user must pull down until the
refresher will go into the `refreshing` state.
Does not apply when the refresher content uses a spinner,
enabling the native refresher.
   * @default 60
   */
  pullMin: number;
  /**
   * Time it takes the refresher to snap back to the `refreshing` state.
Does not apply when the refresher content uses a spinner,
enabling the native refresher.
   * @default '280ms'
   */
  snapbackDuration: string;
}
export interface IonRefresherContentProps {
  /**
   * A static icon or a spinner to display when you begin to pull down.
A spinner name can be provided to gradually show tick marks
when pulling down on iOS devices.
   */
  pullingIcon?: null | string | undefined;
  /**
   * The text you want to display when you begin to pull down.
`pullingText` can accept either plaintext or HTML as a string.
To display characters normally reserved for HTML, they
must be escaped. For example `<Ionic>` would become
`&lt;Ionic&gt;`

For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)

Content is parsed as plaintext by default.
`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config
before custom HTML can be used.
   */
  pullingText?: IonicSafeString | string | undefined;
  /**
   * An animated SVG spinner that shows when refreshing begins
   */
  refreshingSpinner?: 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-sharp' | 'lines-sharp-small' | 'lines-small' | undefined;
  /**
   * The text you want to display when performing a refresh.
`refreshingText` can accept either plaintext or HTML as a string.
To display characters normally reserved for HTML, they
must be escaped. For example `<Ionic>` would become
`&lt;Ionic&gt;`

For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)

Content is parsed as plaintext by default.
`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config
before custom HTML can be used.
   */
  refreshingText?: IonicSafeString | string | undefined;
}
export interface IonReorderProps {}
export interface IonReorderGroupProps {
  /**
   * If `true`, the reorder will be hidden.
   * @default true
   */
  disabled: boolean;
}
export interface IonRippleEffectProps {
  /**
   * Sets the type of ripple-effect:

- `bounded`: the ripple effect expands from the user's click position
- `unbounded`: the ripple effect expands from the center of the button and overflows the container.

NOTE: Surfaces for bounded ripples should have the overflow property set to hidden,
while surfaces for unbounded ripples should have it set to visible.
   * @default 'bounded'
   */
  type: 'bounded' | 'unbounded';
}
export interface IonRouteProps {
  /**
   * A navigation hook that is fired when the route tries to enter.
Returning `true` allows the navigation to proceed, while returning
`false` causes it to be cancelled. Returning a `NavigationHookOptions`
object causes the router to redirect to the path specified.
   */
  beforeEnter?: (() => NavigationHookResult | Promise<NavigationHookResult>) | undefined;
  /**
   * A navigation hook that is fired when the route tries to leave.
Returning `true` allows the navigation to proceed, while returning
`false` causes it to be cancelled. Returning a `NavigationHookOptions`
object causes the router to redirect to the path specified.
   */
  beforeLeave?: (() => NavigationHookResult | Promise<NavigationHookResult>) | undefined;
  /**
   * Name of the component to load/select in the navigation outlet (`ion-tabs`, `ion-nav`)
when the route matches.

The value of this property is not always the tagname of the component to load,
in `ion-tabs` it actually refers to the name of the `ion-tab` to select.
   */
  component: string;
  /**
   * A key value `{ 'red': true, 'blue': 'white'}` containing props that should be passed
to the defined component when rendered.
   */
  componentProps?: undefined | { [key: string]: any; };
  /**
   * Relative path that needs to match in order for this route to apply.

Accepts paths similar to expressjs so that you can define parameters
in the url /foo/:bar where bar would be available in incoming props.
   * @default ''
   */
  url: string;
}
export interface IonRouteRedirectProps {
  /**
   * A redirect route, redirects "from" a URL "to" another URL. This property is that "from" URL.
It needs to be an exact match of the navigated URL in order to apply.

The path specified in this value is always an absolute path, even if the initial `/` slash
is not specified.
   */
  from: string;
  /**
   * A redirect route, redirects "from" a URL "to" another URL. This property is that "to" URL.
When the defined `ion-route-redirect` rule matches, the router will redirect to the path
specified in this property.

The value of this property is always an absolute path inside the scope of routes defined in
`ion-router` it can't be used with another router or to perform a redirection to a different domain.

Note that this is a virtual redirect, it will not cause a real browser refresh, again, it's
a redirect inside the context of ion-router.

When this property is not specified or his value is `undefined` the whole redirect route is noop,
even if the "from" value matches.
   */
  to?: null | string | undefined;
}
export interface IonRouterProps {
  /**
   * The root path to use when matching URLs. By default, this is set to "/", but you can specify
an alternate prefix for all URL paths.
   * @default '/'
   */
  root: string;
  /**
   * The router can work in two "modes":
- With hash: `/index.html#/path/to/page`
- Without hash: `/path/to/page`

Using one or another might depend in the requirements of your app and/or where it's deployed.

Usually "hash-less" navigation works better for SEO and it's more user friendly too, but it might
requires additional server-side configuration in order to properly work.

On the other side hash-navigation is much easier to deploy, it even works over the file protocol.

By default, this property is `true`, change to `false` to allow hash-less URLs.
   * @default true
   */
  useHash: boolean;
}
export interface IonRouterLinkProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * When using a router, it specifies the transition animation when navigating to
another page using `href`.
   */
  routerAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * When using a router, it specifies the transition direction when navigating to
another page using `href`.
   * @default 'forward'
   */
  routerDirection: 'back' | 'forward' | 'root';
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
}
export interface IonRouterOutletProps {
  /**
   * If `true`, the router-outlet should animate the transition of components.
   * @default true
   */
  animated: boolean;
  /**
   * This property allows to create custom transition using AnimationBuilder functions.
   */
  animation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * The mode determines which platform styles to use.
   * @default getIonMode(this)
   */
  mode: 'ios' | 'md';
}
export interface IonRowProps {}
export interface IonSearchbarProps {
  /**
   * If `true`, enable searchbar animation.
   * @default false
   */
  animated: boolean;
  /**
   * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
   * @default 'off'
   */
  autocapitalize: string;
  /**
   * Set the input's autocomplete property.
   * @default 'off'
   */
  autocomplete: 'name' | 'email' | 'tel' | 'url' | 'on' | 'off' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix' | 'nickname' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization' | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2' | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'cc-name' | 'cc-given-name' | 'cc-additional-name' | 'cc-family-name' | 'cc-number' | 'cc-exp' | 'cc-exp-month' | 'cc-exp-year' | 'cc-csc' | 'cc-type' | 'transaction-currency' | 'transaction-amount' | 'language' | 'bday' | 'bday-day' | 'bday-month' | 'bday-year' | 'sex' | 'tel-country-code' | 'tel-national' | 'tel-area-code' | 'tel-local' | 'tel-extension' | 'impp' | 'photo';
  /**
   * Set the input's autocorrect property.
   * @default 'off'
   */
  autocorrect: 'off' | 'on';
  /**
   * Set the cancel button icon. Only applies to `md` mode.
Defaults to `arrow-back-sharp`.
   * @default config.get('backButtonIcon', arrowBackSharp) as string
   */
  cancelButtonIcon: string;
  /**
   * Set the the cancel button text. Only applies to `ios` mode.
   * @default 'Cancel'
   */
  cancelButtonText: string;
  /**
   * Set the clear icon. Defaults to `close-circle` for `ios` and `close-sharp` for `md`.
   */
  clearIcon: string;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.
   */
  debounce: number;
  /**
   * If `true`, the user cannot interact with the input.
   * @default false
   */
  disabled: boolean;
  /**
   * A hint to the browser for which enter key to display.
Possible values: `"enter"`, `"done"`, `"go"`, `"next"`,
`"previous"`, `"search"`, and `"send"`.
   */
  enterkeyhint?: 'done' | 'enter' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined;
  /**
   * A hint to the browser for which keyboard to display.
Possible values: `"none"`, `"text"`, `"tel"`, `"url"`,
`"email"`, `"numeric"`, `"decimal"`, and `"search"`.
   */
  inputmode?: 'decimal' | 'email' | 'none' | 'numeric' | 'search' | 'tel' | 'text' | 'url' | undefined;
  /**
   * This attribute specifies the maximum number of characters that the user can enter.
   */
  maxlength: number;
  /**
   * This attribute specifies the minimum number of characters that the user can enter.
   */
  minlength: number;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If used in a form, set the name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * Set the input's placeholder.
`placeholder` can accept either plaintext or HTML as a string.
To display characters normally reserved for HTML, they
must be escaped. For example `<Ionic>` would become
`&lt;Ionic&gt;`

For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
   * @default 'Search'
   */
  placeholder: string;
  /**
   * The icon to use as the search icon. Defaults to `search-outline` in
`ios` mode and `search-sharp` in `md` mode.
   */
  searchIcon: string;
  /**
   * Sets the behavior for the cancel button. Defaults to `"never"`.
Setting to `"focus"` shows the cancel button on focus.
Setting to `"never"` hides the cancel button.
Setting to `"always"` shows the cancel button regardless
of focus state.
   * @default 'never'
   */
  showCancelButton: 'always' | 'focus' | 'never';
  /**
   * Sets the behavior for the clear button. Defaults to `"focus"`.
Setting to `"focus"` shows the clear button on focus if the
input is not empty.
Setting to `"never"` hides the clear button.
Setting to `"always"` shows the clear button regardless
of focus state, but only if the input is not empty.
   * @default 'always'
   */
  showClearButton: 'always' | 'focus' | 'never';
  /**
   * If `true`, enable spellcheck on the input.
   * @default false
   */
  spellcheck: boolean;
  /**
   * Set the type of the input.
   * @default 'search'
   */
  type: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url';
  /**
   * the value of the searchbar.
   * @default ''
   */
  value?: null | string | undefined;
}
export interface IonSegmentProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the segment.
   * @default false
   */
  disabled: boolean;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the segment buttons will overflow and the user can swipe to see them.
In addition, this will disable the gesture to drag the indicator between the buttons
in order to swipe to see hidden buttons.
   * @default false
   */
  scrollable: boolean;
  /**
   * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.
If `false`, keyboard navigation will only focus the `ion-segment-button` element.
   * @default false
   */
  selectOnFocus: boolean;
  /**
   * If `true`, users will be able to swipe between segment buttons to activate them.
   * @default true
   */
  swipeGesture: boolean;
  /**
   * the value of the segment.
   */
  value?: number | string | undefined;
}
export interface IonSegmentButtonProps {
  /**
   * The `id` of the segment content.
   */
  contentId: string;
  /**
   * If `true`, the user cannot interact with the segment button.
   * @default false
   */
  disabled: boolean;
  /**
   * Set the layout of the text and icon in the segment.
   * @default 'icon-top'
   */
  layout?: 'icon-bottom' | 'icon-end' | 'icon-hide' | 'icon-start' | 'icon-top' | 'label-hide' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The type of the button.
   * @default 'button'
   */
  type: 'button' | 'reset' | 'submit';
  /**
   * The value of the segment button.
   * @default 'ion-sb-' + ids++
   */
  value: number | string;
}
export interface IonSegmentContentProps {}
export interface IonSegmentViewProps {
  /**
   * If `true`, the segment view cannot be interacted with.
   * @default false
   */
  disabled: boolean;
}
export interface IonSelectProps {
  /**
   * The text to display on the cancel button.
   * @default 'Cancel'
   */
  cancelText: string;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).

This property is only available when using the modern select syntax.
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * This property allows developers to specify a custom function or property
name for comparing objects when determining the selected option in the
ion-select. When not specified, the default behavior will use strict
equality (===) for comparison.
   */
  compareWith?: ((currentValue: any, compareValue: any) => boolean) | null | string | undefined;
  /**
   * If `true`, the user cannot interact with the select.
   * @default false
   */
  disabled: boolean;
  /**
   * Text that is placed under the select and displayed when an error is detected.
   */
  errorText: string;
  /**
   * The toggle icon to show when the select is open. If defined, the icon
rotation behavior in `md` mode will be disabled. If undefined, `toggleIcon`
will be used for when the select is both open and closed.
   */
  expandedIcon: string;
  /**
   * The fill for the item. If `"solid"` the item will have a background. If
`"outline"` the item will be transparent with a border. Only available in `md` mode.
   */
  fill?: 'outline' | 'solid' | undefined;
  /**
   * Text that is placed under the select and displayed when no error is detected.
   */
  helperText: string;
  /**
   * The interface the select should use: `action-sheet`, `popover`, `alert`, or `modal`.
   * @default 'alert'
   */
  interface: 'action-sheet' | 'alert' | 'modal' | 'popover';
  /**
   * Any additional options that the `alert`, `action-sheet` or `popover` interface
can take. See the [ion-alert docs](./alert), the
[ion-action-sheet docs](./action-sheet), the
[ion-popover docs](./popover), and the [ion-modal docs](./modal) for the
create options for each interface.

Note: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.
   * @default {}
   */
  interfaceOptions: any;
  /**
   * How to pack the label and select within a line.
`justify` does not apply when the label and select
are on different lines when `labelPlacement` is set to
`"floating"` or `"stacked"`.
`"start"`: The label and select will appear on the left in LTR and
on the right in RTL.
`"end"`: The label and select will appear on the right in LTR and
on the left in RTL.
`"space-between"`: The label and select will appear on opposite
ends of the line with space between the two elements.
   */
  justify?: 'end' | 'space-between' | 'start' | undefined;
  /**
   * The visible label associated with the select.

Use this if you need to render a plaintext label.

The `label` property will take priority over the `label` slot if both are used.
   */
  label: string;
  /**
   * Where to place the label relative to the select.
`"start"`: The label will appear to the left of the select in LTR and to the right in RTL.
`"end"`: The label will appear to the right of the select in LTR and to the left in RTL.
`"floating"`: The label will appear smaller and above the select when the select is focused or it has a value. Otherwise it will appear on top of the select.
`"stacked"`: The label will appear smaller and above the select regardless even when the select is blurred or has no value.
`"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("...").
When using `"floating"` or `"stacked"` we recommend initializing the select with either a `value` or a `placeholder`.
   * @default 'start'
   */
  labelPlacement?: 'end' | 'fixed' | 'floating' | 'stacked' | 'start' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * If `true`, the select can accept multiple values.
   * @default false
   */
  multiple: boolean;
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * The text to display on the ok button.
   * @default 'OK'
   */
  okText: string;
  /**
   * The text to display when the select is empty.
   */
  placeholder: string;
  /**
   * If true, screen readers will announce it as a required field. This property
works only for accessibility purposes, it will not prevent the form from
submitting if the value is invalid.
   * @default false
   */
  required: boolean;
  /**
   * The text to display instead of the selected option's value.
   */
  selectedText?: null | string | undefined;
  /**
   * The shape of the select. If "round" it will have an increased border radius.
   */
  shape?: 'round' | undefined;
  /**
   * The toggle icon to use. Defaults to `chevronExpand` for `ios` mode,
or `caretDownSharp` for `md` mode.
   */
  toggleIcon: string;
  /**
   * The value of the select.
   */
  value: any;
}
export interface IonSelectModalProps {
  header: string;
  multiple: boolean;
  options: SelectModalOption[];
}
export interface IonSelectOptionProps {
  /**
   * If `true`, the user cannot interact with the select option. This property does not apply when `interface="action-sheet"` as `ion-action-sheet` does not allow for disabled buttons.
   * @default false
   */
  disabled: boolean;
  /**
   * The text value of the option.
   */
  value: any;
}
export interface IonSkeletonTextProps {
  /**
   * If `true`, the skeleton text will animate.
   * @default false
   */
  animated: boolean;
}
export interface IonSpinnerProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * Duration of the spinner animation in milliseconds. The default varies based on the spinner.
   */
  duration: number;
  /**
   * The name of the SVG spinner to use. If a name is not provided, the platform's default
spinner will be used.
   */
  name?: 'bubbles' | 'circles' | 'circular' | 'crescent' | 'dots' | 'lines' | 'lines-sharp' | 'lines-sharp-small' | 'lines-small' | undefined;
  /**
   * If `true`, the spinner's animation will be paused.
   * @default false
   */
  paused: boolean;
}
export interface IonSplitPaneProps {
  /**
   * The `id` of the main content. When using
a router this is typically `ion-router-outlet`.
When not using a router, this is typically
your main view's `ion-content`. This is not the
id of the `ion-content` inside of your `ion-menu`.
   */
  contentId: string;
  /**
   * If `true`, the split pane will be hidden.
   * @default false
   */
  disabled: boolean;
  /**
   * When the split-pane should be shown.
Can be a CSS media query expression, or a shortcut expression.
Can also be a boolean expression.
   * @default QUERY['lg']
   */
  when: boolean | string;
}
export interface IonTabProps {
  /**
   * The component to display inside of the tab.
   */
  component?: Function | HTMLElement | null | string | undefined;
  /**
   * A tab id must be provided for each `ion-tab`. It's used internally to reference
the selected tab or by the router to switch between them.
   */
  tab: string;
}
export interface IonTabBarProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The selected tab component
   */
  selectedTab: string;
  /**
   * If `true`, the tab bar will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
}
export interface IonTabButtonProps {
  /**
   * If `true`, the user cannot interact with the tab button.
   * @default false
   */
  disabled: boolean;
  /**
   * This attribute instructs browsers to download a URL instead of navigating to
it, so the user will be prompted to save it as a local file. If the attribute
has a value, it is used as the pre-filled file name in the Save prompt
(the user can still change the file name if they want).
   */
  download?: string | undefined;
  /**
   * Contains a URL or a URL fragment that the hyperlink points to.
If this property is set, an anchor tag will be rendered.
   */
  href?: string | undefined;
  /**
   * Set the layout of the text and icon in the tab bar.
It defaults to `"icon-top"`.
   */
  layout?: 'icon-bottom' | 'icon-end' | 'icon-hide' | 'icon-start' | 'icon-top' | 'label-hide' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * Specifies the relationship of the target object to the link object.
The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
   */
  rel?: string | undefined;
  /**
   * The selected tab component
   * @default false
   */
  selected: boolean;
  /**
   * A tab id must be provided for each `ion-tab`. It's used internally to reference
the selected tab or by the router to switch between them.
   */
  tab: string;
  /**
   * Specifies where to display the linked URL.
Only applies when an `href` is provided.
Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
   */
  target?: string | undefined;
}
export interface IonTabsProps {}
export interface IonTextProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}
export interface IonTextareaProps {
  /**
   * If `true`, the textarea container will grow and shrink based
on the contents of the textarea.
   * @default false
   */
  autoGrow: boolean;
  /**
   * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
   * @default 'none'
   */
  autocapitalize: string;
  /**
   * Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.

This may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.
   * @default false
   */
  autofocus: boolean;
  /**
   * If `true`, the value will be cleared after focus upon edit.
   * @default false
   */
  clearOnEdit: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
   */
  cols: number;
  /**
   * If `true`, a character counter will display the ratio of characters used and the total character limit.
Developers must also set the `maxlength` property for the counter to be calculated correctly.
   * @default false
   */
  counter: boolean;
  /**
   * A callback used to format the counter text.
By default the counter text is set to "itemLength / maxLength".

See https://ionicframework.com/docs/troubleshooting/runtime#accessing-this
if you need to access `this` from within the callback.
   */
  counterFormatter?: ((inputLength: number, maxLength: number) => string) | undefined;
  /**
   * Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.
   */
  debounce: number;
  /**
   * If `true`, the user cannot interact with the textarea.
   * @default false
   */
  disabled: boolean;
  /**
   * A hint to the browser for which enter key to display.
Possible values: `"enter"`, `"done"`, `"go"`, `"next"`,
`"previous"`, `"search"`, and `"send"`.
   */
  enterkeyhint?: 'done' | 'enter' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined;
  /**
   * Text that is placed under the textarea and displayed when an error is detected.
   */
  errorText: string;
  /**
   * The fill for the item. If `"solid"` the item will have a background. If
`"outline"` the item will be transparent with a border. Only available in `md` mode.
   */
  fill?: 'outline' | 'solid' | undefined;
  /**
   * Text that is placed under the textarea and displayed when no error is detected.
   */
  helperText: string;
  /**
   * A hint to the browser for which keyboard to display.
Possible values: `"none"`, `"text"`, `"tel"`, `"url"`,
`"email"`, `"numeric"`, `"decimal"`, and `"search"`.
   */
  inputmode?: 'decimal' | 'email' | 'none' | 'numeric' | 'search' | 'tel' | 'text' | 'url' | undefined;
  /**
   * The visible label associated with the textarea.

Use this if you need to render a plaintext label.

The `label` property will take priority over the `label` slot if both are used.
   */
  label: string;
  /**
   * Where to place the label relative to the textarea.
`"start"`: The label will appear to the left of the textarea in LTR and to the right in RTL.
`"end"`: The label will appear to the right of the textarea in LTR and to the left in RTL.
`"floating"`: The label will appear smaller and above the textarea when the textarea is focused or it has a value. Otherwise it will appear on top of the textarea.
`"stacked"`: The label will appear smaller and above the textarea regardless even when the textarea is blurred or has no value.
`"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("...").
   * @default 'start'
   */
  labelPlacement: 'end' | 'fixed' | 'floating' | 'stacked' | 'start';
  /**
   * This attribute specifies the maximum number of characters that the user can enter.
   */
  maxlength: number;
  /**
   * This attribute specifies the minimum number of characters that the user can enter.
   */
  minlength: number;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * Instructional text that shows before the input has a value.
   */
  placeholder: string;
  /**
   * If `true`, the user cannot modify the value.
   * @default false
   */
  readonly: boolean;
  /**
   * If `true`, the user must fill in a value before submitting a form.
   * @default false
   */
  required: boolean;
  /**
   * The number of visible text lines for the control.
   */
  rows: number;
  /**
   * The shape of the textarea. If "round" it will have an increased border radius.
   */
  shape?: 'round' | undefined;
  /**
   * If `true`, the element will have its spelling and grammar checked.
   * @default false
   */
  spellcheck: boolean;
  /**
   * The value of the textarea.
   * @default ''
   */
  value?: null | string | undefined;
  /**
   * Indicates how the control wraps text.
   */
  wrap?: 'hard' | 'off' | 'soft' | undefined;
}
export interface IonThumbnailProps {}
export interface IonTitleProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The size of the toolbar title.
   */
  size?: 'large' | 'small' | undefined;
}
export interface IonToastProps {
  /**
   * If `true`, the toast will animate.
   * @default true
   */
  animated: boolean;
  /**
   * An array of buttons for the toast.
   */
  buttons?: (string | ToastButton)[] | undefined;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * Additional classes to apply for custom CSS. If multiple classes are
provided they should be separated by spaces.
   */
  cssClass?: string | string[] | undefined;
  /**
   * How many milliseconds to wait before hiding the toast. By default, it will show
until `dismiss()` is called.
   * @default config.getNumber('toastDuration', 0)
   */
  duration: number;
  /**
   * Animation to use when the toast is presented.
   */
  enterAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Header to be shown in the toast.
   */
  header: string;
  /**
   * Additional attributes to pass to the toast.
   */
  htmlAttributes?: undefined | { [key: string]: any; };
  /**
   * The name of the icon to display, or the path to a valid SVG file. See `ion-icon`.
https://ionic.io/ionicons
   */
  icon: string;
  /**
   * If `true`, the toast will open. If `false`, the toast will close.
Use this if you need finer grained control over presentation, otherwise
just use the toastController or the `trigger` property.
Note: `isOpen` will not automatically be set back to `false` when
the toast dismisses. You will need to do that in your code.
   * @default false
   */
  isOpen: boolean;
  /**
   * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
   * @default false
   */
  keyboardClose: boolean;
  /**
   * Defines how the message and buttons are laid out in the toast.
'baseline': The message and the buttons will appear on the same line.
Message text may wrap within the message container.
'stacked': The buttons containers and message will stack on top
of each other. Use this if you have long text in your buttons.
   * @default 'baseline'
   */
  layout: 'baseline' | 'stacked';
  /**
   * Animation to use when the toast is dismissed.
   */
  leaveAnimation?: ((baseEl: any, opts?: any) => Animation) | undefined;
  /**
   * Message to be shown in the toast.
This property accepts custom HTML as a string.
Content is parsed as plaintext by default.
`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config
before custom HTML can be used.
   */
  message?: IonicSafeString | string | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The starting position of the toast on the screen. Can be tweaked further
using the `positionAnchor` property.
   * @default 'bottom'
   */
  position: 'bottom' | 'middle' | 'top';
  /**
   * The element to anchor the toast's position to. Can be set as a direct reference
or the ID of the element. With `position="bottom"`, the toast will sit above the
chosen element. With `position="top"`, the toast will sit below the chosen element.
With `position="middle"`, the value of `positionAnchor` is ignored.
   */
  positionAnchor?: HTMLElement | string | undefined;
  /**
   * If set to 'vertical', the Toast can be dismissed with
a swipe gesture. The swipe direction is determined by
the value of the `position` property:
`top`: The Toast can be swiped up to dismiss.
`bottom`: The Toast can be swiped down to dismiss.
`middle`: The Toast can be swiped up or down to dismiss.
   */
  swipeGesture?: 'vertical' | undefined;
  /**
   * If `true`, the toast will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
   * @default false
   */
  translucent: boolean;
  /**
   * An ID corresponding to the trigger element that
causes the toast to open when clicked.
   */
  trigger?: string | undefined;
}
export interface IonToggleProps {
  /**
   * How to control the alignment of the toggle and label on the cross axis.
`"start"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.
`"center"`: The label and control will appear at the center of the cross axis in both LTR and RTL.
Setting this property will change the toggle `display` to `block`.
   */
  alignment?: 'center' | 'start' | undefined;
  /**
   * If `true`, the toggle is selected.
   * @default false
   */
  checked: boolean;
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * If `true`, the user cannot interact with the toggle.
   * @default false
   */
  disabled: boolean;
  /**
   * Enables the on/off accessibility switch labels within the toggle.
   * @default config.get('toggleOnOffLabels')
   */
  enableOnOffLabels?: boolean | undefined;
  /**
   * Text that is placed under the toggle label and displayed when an error is detected.
   */
  errorText: string;
  /**
   * Text that is placed under the toggle label and displayed when no error is detected.
   */
  helperText: string;
  /**
   * How to pack the label and toggle within a line.
`"start"`: The label and toggle will appear on the left in LTR and
on the right in RTL.
`"end"`: The label and toggle will appear on the right in LTR and
on the left in RTL.
`"space-between"`: The label and toggle will appear on opposite
ends of the line with space between the two elements.
Setting this property will change the toggle `display` to `block`.
   */
  justify?: 'end' | 'space-between' | 'start' | undefined;
  /**
   * Where to place the label relative to the input.
`"start"`: The label will appear to the left of the toggle in LTR and to the right in RTL.
`"end"`: The label will appear to the right of the toggle in LTR and to the left in RTL.
`"fixed"`: The label has the same behavior as `"start"` except it also has a fixed width. Long text will be truncated with ellipses ("...").
`"stacked"`: The label will appear above the toggle regardless of the direction. The alignment of the label can be controlled with the `alignment` property.
   * @default 'start'
   */
  labelPlacement: 'end' | 'fixed' | 'stacked' | 'start';
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
  /**
   * The name of the control, which is submitted with the form data.
   * @default this.inputId
   */
  name: string;
  /**
   * If true, screen readers will announce it as a required field. This property
works only for accessibility purposes, it will not prevent the form from
submitting if the value is invalid.
   * @default false
   */
  required: boolean;
  /**
   * The value of the toggle does not mean if it's checked or not, use the `checked`
property for that.

The value of a toggle is analogous to the value of a `<input type="checkbox">`,
it's only used when the toggle participates in a native `<form>`.
   * @default 'on'
   */
  value?: null | string | undefined;
}
export interface IonToolbarProps {
  /**
   * The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics).
   */
  color?: 'danger' | 'dark' | 'light' | 'medium' | 'primary' | 'secondary' | 'success' | 'tertiary' | 'warning' | undefined;
  /**
   * The mode determines which platform styles to use.
   */
  mode: 'ios' | 'md';
}

export declare const IonAccordion: (options: ComponentOptions<IonAccordionProps>) => SvelteComponent;
export declare const IonAccordionGroup: (options: ComponentOptions<IonAccordionGroupProps>) => SvelteComponent;
export declare const IonActionSheet: (options: ComponentOptions<IonActionSheetProps>) => SvelteComponent;
export declare const IonAlert: (options: ComponentOptions<IonAlertProps>) => SvelteComponent;
export declare const IonApp: (options: ComponentOptions<IonAppProps>) => SvelteComponent;
export declare const IonAvatar: (options: ComponentOptions<IonAvatarProps>) => SvelteComponent;
export declare const IonBackButton: (options: ComponentOptions<IonBackButtonProps>) => SvelteComponent;
export declare const IonBackdrop: (options: ComponentOptions<IonBackdropProps>) => SvelteComponent;
export declare const IonBadge: (options: ComponentOptions<IonBadgeProps>) => SvelteComponent;
export declare const IonBreadcrumb: (options: ComponentOptions<IonBreadcrumbProps>) => SvelteComponent;
export declare const IonBreadcrumbs: (options: ComponentOptions<IonBreadcrumbsProps>) => SvelteComponent;
export declare const IonButton: (options: ComponentOptions<IonButtonProps>) => SvelteComponent;
export declare const IonButtons: (options: ComponentOptions<IonButtonsProps>) => SvelteComponent;
export declare const IonCard: (options: ComponentOptions<IonCardProps>) => SvelteComponent;
export declare const IonCardContent: (options: ComponentOptions<IonCardContentProps>) => SvelteComponent;
export declare const IonCardHeader: (options: ComponentOptions<IonCardHeaderProps>) => SvelteComponent;
export declare const IonCardSubtitle: (options: ComponentOptions<IonCardSubtitleProps>) => SvelteComponent;
export declare const IonCardTitle: (options: ComponentOptions<IonCardTitleProps>) => SvelteComponent;
export declare const IonCheckbox: (options: ComponentOptions<IonCheckboxProps>) => SvelteComponent;
export declare const IonChip: (options: ComponentOptions<IonChipProps>) => SvelteComponent;
export declare const IonCol: (options: ComponentOptions<IonColProps>) => SvelteComponent;
export declare const IonContent: (options: ComponentOptions<IonContentProps>) => SvelteComponent;
export declare const IonDatetime: (options: ComponentOptions<IonDatetimeProps>) => SvelteComponent;
export declare const IonDatetimeButton: (options: ComponentOptions<IonDatetimeButtonProps>) => SvelteComponent;
export declare const IonFab: (options: ComponentOptions<IonFabProps>) => SvelteComponent;
export declare const IonFabButton: (options: ComponentOptions<IonFabButtonProps>) => SvelteComponent;
export declare const IonFabList: (options: ComponentOptions<IonFabListProps>) => SvelteComponent;
export declare const IonFooter: (options: ComponentOptions<IonFooterProps>) => SvelteComponent;
export declare const IonGrid: (options: ComponentOptions<IonGridProps>) => SvelteComponent;
export declare const IonHeader: (options: ComponentOptions<IonHeaderProps>) => SvelteComponent;
export declare const IonImg: (options: ComponentOptions<IonImgProps>) => SvelteComponent;
export declare const IonInfiniteScroll: (options: ComponentOptions<IonInfiniteScrollProps>) => SvelteComponent;
export declare const IonInfiniteScrollContent: (options: ComponentOptions<IonInfiniteScrollContentProps>) => SvelteComponent;
export declare const IonInput: (options: ComponentOptions<IonInputProps>) => SvelteComponent;
export declare const IonInputPasswordToggle: (options: ComponentOptions<IonInputPasswordToggleProps>) => SvelteComponent;
export declare const IonItem: (options: ComponentOptions<IonItemProps>) => SvelteComponent;
export declare const IonItemDivider: (options: ComponentOptions<IonItemDividerProps>) => SvelteComponent;
export declare const IonItemGroup: (options: ComponentOptions<IonItemGroupProps>) => SvelteComponent;
export declare const IonItemOption: (options: ComponentOptions<IonItemOptionProps>) => SvelteComponent;
export declare const IonItemOptions: (options: ComponentOptions<IonItemOptionsProps>) => SvelteComponent;
export declare const IonItemSliding: (options: ComponentOptions<IonItemSlidingProps>) => SvelteComponent;
export declare const IonLabel: (options: ComponentOptions<IonLabelProps>) => SvelteComponent;
export declare const IonList: (options: ComponentOptions<IonListProps>) => SvelteComponent;
export declare const IonListHeader: (options: ComponentOptions<IonListHeaderProps>) => SvelteComponent;
export declare const IonLoading: (options: ComponentOptions<IonLoadingProps>) => SvelteComponent;
export declare const IonMenu: (options: ComponentOptions<IonMenuProps>) => SvelteComponent;
export declare const IonMenuButton: (options: ComponentOptions<IonMenuButtonProps>) => SvelteComponent;
export declare const IonMenuToggle: (options: ComponentOptions<IonMenuToggleProps>) => SvelteComponent;
export declare const IonModal: (options: ComponentOptions<IonModalProps>) => SvelteComponent;
export declare const IonNav: (options: ComponentOptions<IonNavProps>) => SvelteComponent;
export declare const IonNavLink: (options: ComponentOptions<IonNavLinkProps>) => SvelteComponent;
export declare const IonNote: (options: ComponentOptions<IonNoteProps>) => SvelteComponent;
export declare const IonPicker: (options: ComponentOptions<IonPickerProps>) => SvelteComponent;
export declare const IonPickerColumn: (options: ComponentOptions<IonPickerColumnProps>) => SvelteComponent;
export declare const IonPickerColumnOption: (options: ComponentOptions<IonPickerColumnOptionProps>) => SvelteComponent;
export declare const IonPickerLegacy: (options: ComponentOptions<IonPickerLegacyProps>) => SvelteComponent;
export declare const IonPopover: (options: ComponentOptions<IonPopoverProps>) => SvelteComponent;
export declare const IonProgressBar: (options: ComponentOptions<IonProgressBarProps>) => SvelteComponent;
export declare const IonRadio: (options: ComponentOptions<IonRadioProps>) => SvelteComponent;
export declare const IonRadioGroup: (options: ComponentOptions<IonRadioGroupProps>) => SvelteComponent;
export declare const IonRange: (options: ComponentOptions<IonRangeProps>) => SvelteComponent;
export declare const IonRefresher: (options: ComponentOptions<IonRefresherProps>) => SvelteComponent;
export declare const IonRefresherContent: (options: ComponentOptions<IonRefresherContentProps>) => SvelteComponent;
export declare const IonReorder: (options: ComponentOptions<IonReorderProps>) => SvelteComponent;
export declare const IonReorderGroup: (options: ComponentOptions<IonReorderGroupProps>) => SvelteComponent;
export declare const IonRippleEffect: (options: ComponentOptions<IonRippleEffectProps>) => SvelteComponent;
export declare const IonRoute: (options: ComponentOptions<IonRouteProps>) => SvelteComponent;
export declare const IonRouteRedirect: (options: ComponentOptions<IonRouteRedirectProps>) => SvelteComponent;
export declare const IonRouter: (options: ComponentOptions<IonRouterProps>) => SvelteComponent;
export declare const IonRouterLink: (options: ComponentOptions<IonRouterLinkProps>) => SvelteComponent;
export declare const IonRouterOutlet: (options: ComponentOptions<IonRouterOutletProps>) => SvelteComponent;
export declare const IonRow: (options: ComponentOptions<IonRowProps>) => SvelteComponent;
export declare const IonSearchbar: (options: ComponentOptions<IonSearchbarProps>) => SvelteComponent;
export declare const IonSegment: (options: ComponentOptions<IonSegmentProps>) => SvelteComponent;
export declare const IonSegmentButton: (options: ComponentOptions<IonSegmentButtonProps>) => SvelteComponent;
export declare const IonSegmentContent: (options: ComponentOptions<IonSegmentContentProps>) => SvelteComponent;
export declare const IonSegmentView: (options: ComponentOptions<IonSegmentViewProps>) => SvelteComponent;
export declare const IonSelect: (options: ComponentOptions<IonSelectProps>) => SvelteComponent;
export declare const IonSelectModal: (options: ComponentOptions<IonSelectModalProps>) => SvelteComponent;
export declare const IonSelectOption: (options: ComponentOptions<IonSelectOptionProps>) => SvelteComponent;
export declare const IonSkeletonText: (options: ComponentOptions<IonSkeletonTextProps>) => SvelteComponent;
export declare const IonSpinner: (options: ComponentOptions<IonSpinnerProps>) => SvelteComponent;
export declare const IonSplitPane: (options: ComponentOptions<IonSplitPaneProps>) => SvelteComponent;
export declare const IonTab: (options: ComponentOptions<IonTabProps>) => SvelteComponent;
export declare const IonTabBar: (options: ComponentOptions<IonTabBarProps>) => SvelteComponent;
export declare const IonTabButton: (options: ComponentOptions<IonTabButtonProps>) => SvelteComponent;
export declare const IonTabs: (options: ComponentOptions<IonTabsProps>) => SvelteComponent;
export declare const IonText: (options: ComponentOptions<IonTextProps>) => SvelteComponent;
export declare const IonTextarea: (options: ComponentOptions<IonTextareaProps>) => SvelteComponent;
export declare const IonThumbnail: (options: ComponentOptions<IonThumbnailProps>) => SvelteComponent;
export declare const IonTitle: (options: ComponentOptions<IonTitleProps>) => SvelteComponent;
export declare const IonToast: (options: ComponentOptions<IonToastProps>) => SvelteComponent;
export declare const IonToggle: (options: ComponentOptions<IonToggleProps>) => SvelteComponent;
export declare const IonToolbar: (options: ComponentOptions<IonToolbarProps>) => SvelteComponent;
